{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","_useState","useState","edit","value","_useState2","Object","slicedToArray","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","react_default","a","createElement","className","onSubmit","preventDefault","id","Math","floor","random","text","Fragment","type","placeholder","name","onChange","ref","Todo","_ref","todos","completeTodo","removeTodo","updateTodo","setEdit","components_TodoForm","map","todo","index","isComplete","key","onClick","index_esm","ti_index_esm","TodoList","setTodos","test","newTodos","concat","toConsumableArray","components_Todo","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","components_TodoList","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.a8f2faef.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\r\nimport { Form } from 'react-bootstrap'\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '')\r\n\r\n    const inputRef = useRef(null)\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n    const handleChange = e => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000),\r\n            text: input,\r\n        })\r\n        setInput('')\r\n    }\r\n    return (\r\n        <form className='todo-form' onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Edytuj zadanie...'\r\n                        value={input}\r\n                        name=\"text\"\r\n                        className='todo-input edit'\r\n                        onChange={handleChange}\r\n                        ref={inputRef}\r\n                    />\r\n                    <button className='todo-button edit'>Edytuj</button>\r\n                </>) :\r\n                (\r\n                    <>\r\n                        <input\r\n                            type='text'\r\n                            placeholder='Wpisz zadanie...'\r\n                            value={input}\r\n                            name=\"text\"\r\n                            className='todo-input'\r\n                            onChange={handleChange}\r\n                            ref={inputRef}\r\n                        />\r\n                        <button className='todo-button'>Dodaj</button>\r\n                    </>\r\n                )}\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport { RiCloseCircleLine } from 'react-icons/ri'\r\nimport { TiEdit } from 'react-icons/ti'\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo,updateTodo }) => {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    })\r\n\r\n    const submitUpdate = value => {\r\n        updateTodo(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n    if (edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n\r\n    return todos.map((todo, index) => (\r\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n            key={index}\r\n        >\r\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n                {todo.text}\r\n            </div>\r\n            <div className='icons'>\r\n                <RiCloseCircleLine\r\n                    onClick={() => removeTodo(todo.id)}\r\n                    className='delete-icon'\r\n                />\r\n                <TiEdit onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n                    className='edit-icon'\r\n                />\r\n\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n}\r\n\r\nexport default Todo","import React, { useState } from 'react'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nfunction TodoList() {\r\n    const [todos, setTodos] = useState([])\r\n\r\n    const addTodo = todo => {\r\n        if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return\r\n        }\r\n        const newTodos = [todo, ...todos]\r\n        setTodos(newTodos)\r\n        \r\n    }\r\n\r\nconst updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n        return\r\n    }\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\r\n}\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...todos].filter(todo => todo.id !== id)\r\n        setTodos(removeArr)\r\n    }\r\n\r\n\r\n    const completeTodo = id => { \r\n        let updatedTodos = todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.isComplete = !todo.isComplete\r\n            }\r\n            return todo\r\n        })\r\n        setTodos(updatedTodos)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Dodaj zadania na dzisiaj</h1>\r\n            <TodoForm onSubmit={addTodo} />\r\n            <Todo todos={todos} completeTodo={completeTodo} removeTodo={removeTodo} updateTodo={updateTodo}/>\r\n        </div>\r\n    )\r\n    }\r\n\r\nexport default TodoList","import React from 'react'\nimport './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}